'''
Description: this program use pandas to read profile file generated by searching compare and display them
Date: 2022-04-06 20:52:02
LastEditTime: 2022-04-07 00:26:19
'''
from cProfile import label
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
#read data from the file
def read_data(filename):
    data=pd.read_csv(filename)
    return data
#show the iterations and steps
def show_iterations_and_steps(data,title="algorithm",log_scale=False):
    df_steps=data["steps"]
    df_iterations=data["iteration"]
    plt.scatter(df_steps,df_iterations,s=16,c=[(0.7,0,0.7,0.2) for i in range(len(df_steps))])
    # plt.scatter(df_steps,df_iterations)
    plt.xlabel("steps")
    plt.ylabel("iteration")
    if log_scale:
        plt.yscale("log")
    plt.title("iterations and steps of "+title)
    plt.show()

#show steps in the same plot
def show_steps_and_time(data,title="algorithm",log_scale=False):
    df_steps=data["steps"]
    df_time_consumed=data["time_consumed"]
    plt.scatter(df_steps,df_time_consumed,s=16,c=[(0.7,0,0.7,0.2) for i in range(len(df_steps))])
    # plt.scatter(df_steps,df_iterations)
    plt.xlabel("steps")
    plt.ylabel("time consumed")
    if log_scale:
        plt.yscale("log")
    plt.title("steps of "+title)
    plt.show()
#show iteration and time 
def show_iterations_and_time(data,title="algorithm",log_scale=False):
    df_iterations=data["iteration"]
    df_time_consumed=data["time_consumed"]
    plt.scatter(df_iterations,df_time_consumed,s=16,c=[(0.7,0,0.7,0.2) for i in range(len(df_iterations))])
    # plt.scatter(df_steps,df_iterations)
    plt.xlabel("iterations")
    plt.ylabel("time consumed")
    if log_scale:
        plt.yscale("log")
    plt.title("iterations of "+title)
    plt.show()
#show all of them
def show_all():
    data_bfs=read_data(".\\profile_file\\BFS300.csv")
    data_a_star_network=read_data(".\\profile_file\\a_star_network.csv")
    bfs_time_consumed=data_bfs["time_consumed"]
    bfs_steps=data_bfs["steps"]
    bfs_iterations=data_bfs["iteration"]
    a_star_network_time_consumed=data_a_star_network["time_consumed"]
    a_star_network_steps=data_a_star_network["steps"]
    a_star_network_iterations=data_a_star_network["iteration"]
    plt.scatter(bfs_steps,bfs_iterations,s=16,c=[(0.7,0,0.7,0.2) for i in range(len(bfs_steps))],label="bfs")
    plt.scatter(a_star_network_steps,a_star_network_iterations,s=16,c=[(0,0.7,0.7,0.2) for i in range(len(a_star_network_steps))],label="a_star_network")
    plt.xlabel("steps")
    plt.ylabel("iterations")
    plt.yscale("log")
    plt.title("steps and iterations")
    plt.legend()
    plt.show()

if __name__ == '__main__':
    data=read_data(".\\profile_file\\BFS300.csv")
    # print(data)
    print(data.describe())
    # show_iterations_and_steps(data,"wrong tiles",True)
    # show_iterations_and_time(data,"BFS",True)
    show_all()